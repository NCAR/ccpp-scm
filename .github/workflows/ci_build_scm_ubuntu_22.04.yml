name: CI test to build the CCPP-SCM on ubuntu v22.04

on: [pull_request,workflow_dispatch]

jobs:
  build_scm:

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        fortran-compiler: [gfortran-10, gfortran-11, gfortran-12]
        build-type:       [Release, Debug]
        py-version:       [3.7.13, 3.9.12]

    # Environmental variables
    env:
      NFHOME:     /home/runner/netcdf-fortran
      NFVERSION:  v4.5.3
      bacio_ROOT: /home/runner/bacio
      sp_ROOT:    /home/runner/NCEPLIBS-sp
      w3emc_ROOT: /home/runner/myw3emc
      SCM_ROOT:   /home/runner/work/ccpp-scm/ccpp-scm
      suites:     SCM_GFS_v15p2,SCM_GFS_v16,SCM_GFS_v16_RRTMGP,SCM_GFS_v17_p8,SCM_HRRR,SCM_RRFS_v1beta,SCM_RAP,SCM_WoFS_v0,SCM_GFS_v15p2_ps,SCM_GFS_v16_ps,SCM_GFS_v16_RRTMGP_ps,SCM_GFS_v17_p8_ps,SCM_HRRR_ps,SCM_RRFS_v1beta_ps,SCM_RAP_ps,SCM_WoFS_v0_ps,SCM_HRRR_gf,SCM_HRRR_gf_ps

    # Workflow steps
    steps:
    #######################################################################################
    # Initial
    #######################################################################################
    - name: Checkout SCM code (into /home/runner/work/ccpp-scm/)
      uses: actions/checkout@v4

    - name: Initialize submodules
      run: git submodule update --init --recursive

    #######################################################################################
    # Python setup
    #######################################################################################
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{matrix.py-version}}

    - name: Add conda to system path
      run: |
        echo $CONDA/bin >> $GITHUB_PATH

    - name: Install NetCDF Python libraries
      run: |
        conda install --yes -c conda-forge h5py>=3.4 netCDF4 f90nml

    - name: Update system packages
      run: sudo apt-get update

    #######################################################################################
    # Install FORTRAN dependencies
    #######################################################################################
    - name: Install openmpi
      run: |
        wget https://github.com/open-mpi/ompi/archive/refs/tags/v4.1.6.tar.gz
        tar -xvf v4.1.6.tar.gz
        cd ompi-4.1.6
        ./autogen.pl
        ./configure --prefix=/home/runner/ompi-4.1.6
        make -j4
        make install
        echo "LD_LIBRARY_PATH=/home/runner/ompi-4.1.6/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PATH=/home/runner/ompi-4.1.6/bin:$PATH" >> $GITHUB_ENV

    - name: Cache bacio library v2.4.1
      id: cache-bacio-fortran
      uses: actions/cache@v4
      with:
        path: /home/runner/bacio
        key: cache-bacio-fortran-${{matrix.fortran-compiler}}-key

    - name: Install bacio library v2.4.1
      if: steps.cache-bacio-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.4.1 https://github.com/NOAA-EMC/NCEPLIBS-bacio.git bacio
        cd bacio && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${bacio_ROOT} ../
        make -j2
        make install
        echo "bacio_DIR=/home/runner/bacio/lib/cmake/bacio" >> $GITHUB_ENV

    - name: Cache SP-library v2.3.3
      id: cache-sp-fortran
      uses: actions/cache@v4
      with:
        path: /home/runner/NCEPLIBS-sp
        key: cache-sp-fortran-${{matrix.fortran-compiler}}-key

    - name: Install SP-library v2.3.3
      if: steps.cache-sp-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.3.3 https://github.com/NOAA-EMC/NCEPLIBS-sp.git NCEPLIBS-sp
        cd NCEPLIBS-sp && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${sp_ROOT} ../
        make -j2
        make install
        echo "sp_DIR=/home/runner/NCEPLIBS-sp/lib/cmake/sp" >> $GITHUB_ENV

    - name: Cache w3emc library v2.9.2
      id: cache-w3emc-fortran
      uses: actions/cache@v4
      with:
        path: /home/runner/myw3emc
        key: cache-w3emc-fortran-${{matrix.fortran-compiler}}-key

    - name: Install w3emc library v2.9.2
      if: steps.cache-w3emc-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.9.2 https://github.com/NOAA-EMC/NCEPLIBS-w3emc.git NCEPLIBS-w3emc
        cd NCEPLIBS-w3emc && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${w3emc_ROOT} ../
        make -j2
        make install
        echo "w3emc_DIR=/home/runner/myw3emc/lib/cmake/w3emc" >> $GITHUB_ENV

    - name: Install NetCDF C library
      run: |
        sudo apt-get update
        sudo apt-get install libnetcdf-dev

    - name: Cache NetCDF Fortran library
      id: cache-netcdf-fortran
      uses: actions/cache@v4
      with:
        path: /home/runner/netcdf-fortran
        key: cache-netcdf-fortran-${{matrix.fortran-compiler}}-key

    - name: Install NetCDF Fortran library
      if: steps.cache-netcdf-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch ${NFVERSION} https://github.com/Unidata/netcdf-fortran.git
        cd netcdf-fortran
        ./configure
        make -j
        sudo make install
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${NFHOME}/lib

    - name: Environment for openmpi compiler
      run: |
        echo "FC=mpif90" >> $GITHUB_ENV
        echo "CC=mpicc"  >> $GITHUB_ENV

    #######################################################################################
    # Build SCM.
    #######################################################################################

    - name: Configure build with CMake (Release)
      if: contains(matrix.build-type, 'Release')
      run: |
        cd ${SCM_ROOT}/scm
        mkdir bin && cd bin
        cmake -DCCPP_SUITES=${suites} ../src

    - name: Configure build with CMake (Debug)
      if: contains(matrix.build-type, 'Debug')
      run: |
        cd ${SCM_ROOT}/scm
        mkdir bin && cd bin
        cmake -DCCPP_SUITES=${suites} -DCMAKE_BUILD_TYPE=Debug ../src

    - name: Build SCM
      run: |
        cd ${SCM_ROOT}/scm/bin
        make -j4
